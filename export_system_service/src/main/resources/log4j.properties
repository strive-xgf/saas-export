## 将debug等级（可修改）的日志信息输出到CONSOLE和LOGFILE这两个目的地（多个按,逗号隔开）
## CONSOLE和LOGFILE定义在下面的代码，【可以任意起名，可以有多个，不一定只是两个】
## 等级：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
##    比如（配置OFF全部都不显示，配置为INFO这样只显示INFO、WARN、ERROR的log信息，而DEBUG信息不会被显示）
#log4j.rootCategory=debug, CONSOLE, LOGFILE
#
## Set the enterprise logger category to FATAL and its only appender to CONSOLE.
#log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE
#
## =======================================================================================
## CONSOLE配置（名称可以自定义） - 这里配置控制台输出日志
#
## log4j.appender.CONSOLE -->  定义名为CONSOLE的输出端是哪种类型，有五个值
## org.apache.log4j.ConsoleAppender（控制台）
## org.apache.log4j.FileAppender（文件）
## org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
## org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
## org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
## 这里CONSOLE输出端是控制台
#log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
#
## log4j.appender.CONSOLE.layout  -->  定义名为CONSOLE的输出端的layout布局方式是哪种类型，有四个值
## org.apache.log4j.PatternLayout（可以灵活地指定布局模式）【***】
## org.apache.log4j.HTMLLayout（以HTML表格形式布局）
##org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
##org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
## 这里设置为PatternLayout，可以灵活指定布局的模式
#log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
#
## log4j.appender.CONSOLE.layout.ConversionPattern
## 使用PatternLayout布局需要指定打印信息的具体格式ConversionPattern，参数：
##   %d 输出日志时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2020-10-16 17:02:28,968
##   %r 输出自应用启动到输出该log信息耗费的毫秒数
##   %t 输出产生该日志事件的线程名（比如main、gc）
##   %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL等方式
##   %c 输出所属的类目，通常就是所在类的全名；
##   %m 输出代码中指定的消息
##   %M 输出打印该条日志的方法名
##   %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
#
##   %l 输出日志事件的发生位置，及在代码中的行数；
##   [QC]是log信息的开头，可以为任意字符，一般为项目简称。
#log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %-6r [%t] %-5p %30.30c - %m%n
#
## 输出消息编码
##log4j.appender.CONSOLE.encoding=UTF-8
#
## =======================================================================================
## LOGFILE配置 （名称可以自定义） 这里配置日志文件存储（存储到指定路径）
#
## log4j.appender.LOGFILE 用于定义名为LOGFILE的输出端的类型为每天产生一个日志文件。
#log4j.appender.LOGFILE=org.apache.log4j.FileAppender
## log4j.appender.LOGFILE.File 定义名为LOGFILE的输出端的文件名为E:\logFile\SSM\ssm.log(可以自行修改)
#log4j.appender.LOGFILE.File=E:\\logFile\\saas-export\\saas-export.log
#
#log4j.appender.LOGFILE.Append=true
## log4j.appender.LOGFILE.layout 输出日志布局设置PatternLayout，和上面的一样
#log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
## log4j.appender.LOGFILE.layout.ConversionPattern 自定义格式输出，和上面一样
#log4j.appender.LOGFILE.layout.ConversionPattern=%d{ISO8601} %-6r [t] %-5p %30.30c %x - %m%n
#
#

log4j.rootLogger=debug, stdout, logfile

log4j.category.org.springframework=info
#log4j.category.org.apache=INFO

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n

log4j.appender.logfile=org.apache.log4j.RollingFileAppender
log4j.appender.logfile.File=E:\\logFile\\saas-export\\saas-export.log
log4j.appender.logfile.MaxFileSize=1KB
log4j.appender.logfile.MaxBackupIndex=5
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n



