<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 1.配置shiroFilter 认证或授权逻辑处理对象 -->
    <!-- 注入：这里的shiroFilter必须和web.xml的filter-name保持一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--注入SecurityManager-->
        <property name="securityManager" ref="securityManager"/>

        <property name="filterChainDefinitions" >
            <value>
                <!-- 如果访问静态资源设置为anon过滤器，不要求session中有user，直接可以访问 -->
                <!--anon可以理解为放行，/**表示拦截所有包括子文件夹-->
                /css/**=anon
                /img/**=anon
                /fonts/**=anon
                /plugins/**=anon
                /testjsp/**=anon
                <!-- 如果通过路径请求login登录方法也放行设置为anon -->
                <!-- 登录方法拦截的话，永远都登录不进去，登录的表单提交（肯定不能拦截，不然登不进去） -->
                /system/user/login-shiro=anon  <!-- shiro登录页面表单提交放行 -->
                /system/user/login=anon  <!-- 登录表单提交放行 -->
                /login.jsp=anon  <!-- 登录页面放行 -->
                <!-- 除了以上的，其他任何xxx的controller方法都要拦截，认证和判断权限进行页面跳转
                    要求登录 authc查询session中是否有user-->

                <!-- 权限校验的第二种方式配置过滤器 去/company/toList的话必须要有企业管理的权限
                    这个企业管理，是我们自定义的AuthRealm的授权doGetAuthorizationInfo方法中查询用户的权限
                    然后将模块权限的名称添加到shiro中
                    【注意】权限校验要配置在 /**=authc 的前面
                 -->
                <!--/company/toList=perms["企业管理"]-->
                <!-- 拦截company模块下的所有，都要有企业管理权限才能查看 -->
                /company/*=perms["企业管理"]
                /**=authc
            </value>
        </property>
        <!--如果session中没有user，表示未登录，页面转到login-shiro.jsp进行登录 -->
        <property name="loginUrl" value="/login-shiro.jsp"/>

        <!-- unauthorizedUrl配置用户访问url没有权限时，跳转非授权页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
    </bean>


    <!--  2.1 创建SecurityManager（类似service） 权限框架的核心 DefaultWebSecurityManager是一个代理 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--注入Realm（类似dao注入）-->
        <property name="realm" ref="authRealm"/>
    </bean>

    <!-- 配置一个密码的匹配器（使用自定义的了，这个不使用了） -->
    <!--  123456 是用户提交过来的密码明文， 密码的匹配器，得到密文，与数据库的密码 -->
    <!--创建凭证匹配器-->
    <bean id="credentialsMatcher1" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--指定加密算法-->
        <property name="hashAlgorithmName" value="md5"/>
    </bean>

    <!--使用自己定义的匹配器-->
    <bean id="credentialsMatcher2" class="com.xgf.web.utils.CustomCredentialsMatcher"></bean>

    <!-- 3.创建Realm（类似dao）,在AuthRealm类上就不需要加@Component注解了 -->
    <bean id="authRealm" class="com.xgf.web.shiro.AuthRealm">
        <!-- 使用自定义匹配器（密码） -->
        <property name="credentialsMatcher" ref="credentialsMatcher2"/>
    </bean>





    <!-- 权限校验的注解方式配置@RequiredPermission（不用注解方式的话可以注释掉）  -->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>