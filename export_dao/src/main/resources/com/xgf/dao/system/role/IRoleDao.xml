<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.xgf.dao.system.role.IRoleDao">

   <!-- resultType 指定一个java类型，要求表的字段与变量的名称一致
    resultMap  适用表字段和类属性名不一致的情况（还有一对一、一对多）
    column是数据库表字段   property是类的属性名称
    -->
    <resultMap id="roleMap" type="role">
        <id column="role_id"          property="roleId"       />
        <result column="name"         property="name"         />
        <result column="remark"       property="remark"       />
        <result column="order_no"     property="orderNo"      />
        <result column="create_by"    property="createBy"     />
        <result column="create_dept"  property="createDept"   />
        <result column="create_time"  property="createTime"   />
        <result column="update_by"    property="updateBy"     />
        <result column="update_time"  property="updateTime"   />
        <result column="company_id"   property="companyId"    />
        <result column="company_name" property="companyName"  />
    </resultMap>

    <!-- 查询所有角色，通过order_no（升序）排序 -->
    <select id="findAll" parameterType="string" resultMap="roleMap">
        select * from pe_role where company_id=#{companyId} order by order_no
    </select>

    <!-- 增加一个角色 -->
    <insert id="save" parameterType="role">
        insert into pe_role
        (
        role_id       ,
        name          ,
        remark        ,
        order_no      ,
        create_by     ,
        create_dept   ,
        create_time   ,
        update_by     ,
        update_time   ,
        company_id    ,
        company_name
        )
        values
        (
        #{roleId      },
        #{name        },
        #{remark      },
        #{orderNo     },
        #{createBy    },
        #{createDept  },
        #{createTime  },
        #{updateBy    },
        #{updateTime  },
        #{companyId   },
        #{companyName }
        )

    </insert>

    <!-- 通过id查找角色 -->
    <select id="findById" parameterType="string" resultMap="roleMap">
        select * from pe_role where role_id=#{roleId}
    </select>

    <!-- 更新角色信息 -->
    <update id="update" parameterType="role">
            update pe_role set

            name         = #{name       },
            remark       = #{remark     },
            order_no     = #{orderNo    },
            create_by    = #{createBy   },
            create_dept  = #{createDept },
            create_time  = #{createTime },
            update_by    = #{updateBy   },
            update_time  = #{updateTime },
            company_id   = #{companyId  },
            company_name = #{companyName}

            where role_id = #{roleId}
    </update>

    <!-- 通过id删除角色 -->
    <delete id="deleteById" parameterType="string">
            delete from pe_role where role_id=#{roleId}
    </delete>


<!-- pe_role_user 用户角色表 -->
    <!--  通过userid查询用户的角色列表  -->
    <select id="findByUserId" parameterType="string" resultMap="roleMap">
            select *
            from pe_role_user ru inner join pe_role r
            on ru.role_id= r.role_id
            where ru.user_id = #{userId}
    </select>

    <!-- 通过userid删除用户的所有角色 -->
    <delete id="deleteUserRoleByUserId" parameterType="string">
            delete from pe_role_user  where user_id=#{userId}
    </delete>

    <!-- 保存用户的一个角色 -->
    <insert id="saveUserRole" >
            insert into pe_role_user values(#{arg0},#{arg1})
    </insert>

</mapper>