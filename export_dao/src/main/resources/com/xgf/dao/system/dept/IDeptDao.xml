<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--namespace: 需要映射的Dao接口类型-->
<mapper namespace="com.xgf.dao.system.dept.IDeptDao">

    <!-- 数据库，下划线（aa_bb_cc) 类是驼峰（aaBbCc）
        将查询结果映射到类的成员变量
        column是数据库的列名   property是类的属性名（映射对应）
     -->
    <resultMap id="deptMap" type="dept">
        <id column="dept_id" property="deptId"/>
        <result column="dept_name" property="deptName"/>
        <result column="company_id" property="companyId"/>
        <result column="company_name" property="companyName"/>
        <!-- 将表中上级部门id(parent_id) 映射为Dept部门类型（通过findById查询整合部门信息封装到Dept部门中）
             在类Dept私有成员变量private  Dept parent
             一对一关联查询，一个Dept部门，有一个上级部门
        -->
        <association column="parent_id" property="parent" javaType="dept" select="findById"></association>
    </resultMap>

    <!-- 通过部门id查询部门的信息（为了表中的上级部门id封装到类中为一个部门对象） -->
    <select id="findById" parameterType="string" resultMap="deptMap">
        select  * from  pe_dept where dept_id = #{dept_id}
    </select>

    <!-- 查询所有部门信息 -->
    <select id="findAll" parameterType="string" resultMap="deptMap">
            select * from pe_dept where company_id = #{companyId}
    </select>

    <!-- save保存部门 -->
    <insert id="save" parameterType="dept">
    insert into pe_dept
        (
        dept_id      ,
        dept_name    ,
        parent_id    ,
        state        ,
        company_id   ,
        company_name
        )
        values
        (
        #{deptId     },
        #{deptName   },
        #{parent.deptId  },
        #{state       },
        #{companyId  },
        #{companyName}
        )
    </insert>


    <!-- if实现部门信息更新 -->
<!--        <update id="update" parameterType="dept">
         update  pe_dept set

                dept_name     =  #{deptName    }  ,
                <if test="parent.deptId  == null or parent.deptId == '' ">
                    parent_id   = NULL  ,
                </if>
                <if test="parent.deptId !=null and parent.deptId != '' ">
                    parent_id     = ${parent.deptId}  ,
                </if>
                state         =  #{state       }  ,
                company_id    =  #{companyId   }  ,
                company_name  =  #{companyName }

         where dept_id= #{deptId}
        </update>-->


    <!-- choose when otherwise实现部门信息更新（如果设置当前部门为顶级部门也就是最高级部门），页面传过来的值是Null -->
    <update id="update" parameterType="dept">
        update  pe_dept set
        dept_name     =  #{deptName    }  ,
        <choose>
            <when test="parent.deptId  == null or parent.deptId == ''">
                parent_id   = NULL  ,
            </when>
            <otherwise>
                parent_id    = #{parent.deptId}  ,
            </otherwise>
        </choose>
        state         =  #{state       }  ,
        company_id    =  #{companyId   }  ,
        company_name  =  #{companyName }

        where dept_id= #{deptId}
    </update>


    <!-- 统计当前部门作为其他部门的上级的数量，也就是当前部门的下级部门的数量（直接下级） -->
    <select id="findParentCount" parameterType="string" resultType="int">
        select count(*) from pe_dept where parent_id=#{deptId}
    </select>

    <!-- 通过id删除部门 -->
    <delete id="deleteById" parameterType="string">
        delete from pe_dept where dept_id=#{deptId}
    </delete>


</mapper>